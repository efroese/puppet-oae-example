#!/bin/bash

# Configuration ##############################################################
# SCRIPT_DIR: path to directory containing parse_logs.rb
# PASSWORD_FILE: path to file containing: system_url admin_password
BASE_DIR="<%= scope.lookupvar('oae::params::basedir') %>"
SCRIPT_DIR="${BASE_DIR}/bin";
PASSWORD_FILE="${BASE_DIR}/.oae_credentials.txt";
##############################################################################

# Treat unset variables as an error when performing parameter expansion
set -o nounset

# Pre-flight checks ##########################################################
# Check password file exists:
if [ ! -f ${PASSWORD_FILE} ] ; then
    echo "ERROR: No file found containing sakai oae credentials";
    exit 1;
fi

# Check password file is not group / world readable:
check_permissions=`find ${PASSWORD_FILE} -perm 0600 | wc -l`;
if [ "${check_permissions}" != "1" ] ; then
    echo "WARN: Permissions on sakai oae credentials file are too liberal.";
    echo "INFO: Attempting to fix permissions on sakai oae credentials file";
    chmod 600 ${PASSWORD_FILE};
    if [ "${?}" != "0" ] ; then
        echo "ERROR: Permissions on sakai oae credentials file broken";
        exit 2;
    fi
fi

# Parse password file - should contain sakai oae system url and admin password
# separated by space:
SAKAIOAE_URL=`cat ${PASSWORD_FILE} | cut -d' ' -f1`
PASSWORD=`cat ${PASSWORD_FILE} | cut -d' ' -f2`;

if [ "${SAKAIOAE_URL}" = "" -o "${PASSWORD}" = "" ] ; then
    echo "ERROR: failure retrieving credentials";
    exit 3;
fi

# Make sure the sakai oae url specified has a trailing slash provided:
check_sakaioae_url=`echo ${SAKAIOAE_URL} | grep '/$'`;

if [ "${?}" != "0" ] ; then
    echo "ERROR: Sakai OAE URL in ${PASSWORD_FILE} does not have a trailing '/'";
    exit 4;
fi

##############################################################################


# Main action ###############################################################
# Enter the script directory first:
pushd ${SCRIPT_DIR} > /dev/null;

# Check for lock file:
if [ -f ${SCRIPT_DIR}/.kal_analytics.lock ] ; then
    echo "WARN: previous analytics run did not complete in the past day!";
    exit 6;
fi

# Create lock file:
touch ${SCRIPT_DIR}/.kal_analytics.lock;

if [ "${?}" = "0" ] ; then
    # Run the preview processol:
    ruby ${SCRIPT_DIR}/parse_logs.rb --server ${SAKAIOAE_URL} --password ${PASSWORD} \
        --remote prod-app1,prod-app2 --path /var/log/sakaioae/error.log \
        --append --upload prod-apache1 --uploadpath /tmp --user scp_internal;
    # ruby scripts return 1 on success:
    ruby_return_code=${?};
    if [ "${ruby_return_code}" = "1" ] ; then
        touch ${SCRIPT_DIR}/.kal_analytics.success;
    else
        echo "ERROR: ruby ${SCRIPT_DIR}/parse_logs.rb returned non-one exit code: '${ruby_return_code}'";
        rm -f ${SCRIPT_DIR}/.kal_analytics.lock;
        exit 7;
    fi
fi

rm -f ${SCRIPT_DIR}/.kal_analytics.lock;
# Lock file released.

popd > /dev/null;
##############################################################################

exit 0;
