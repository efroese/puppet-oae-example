#!/bin/bash
#
# run_sis_batch.sh
# - Run the rSmart basic SIS batch job
# 
# Erik Froese <erik@hallwaytech.com>
#
# file managed by puppet.
# See https://github.com/rSmart/puppet-oae/modules/sis/templates/run_sis_batch.sh
#

SIS_BATCH_HOME=<%= scope.lookupvar('sis::batch::home') %>
SIS_JAR=${SIS_BATCH_HOME}/<%= scope.lookupvar('sis::batch::artifact') %>
EMAIL_RECIPIENT="<%= scope.lookupvar('sis::batch::email_report') %>"

CSV_DIR=<%= scope.lookupvar('sis::batch::csv_dir') %>
CSV_SCHOOLS=`ls <%= scope.lookupvar('sis::batch::home') %>/etc/schools`
CSV_OBJECT_TYPES="<% scope.lookupvar('sis::batch::csv_object_types').each do |cot| -%><%= cot %> <% end -%>"

GLOBAL_JAVA_OPTS="${JAVA_OPTS} -Dsis.config.file=${SIS_BATCH_HOME}/sis.properties "

NOW=`date +%Y%m%d-%H%M`

OUTPUT=`mktemp`

ARCHIVE_ROOT=${CSV_DIR}/archive
ARCHIVE_DIR=$ARCHIVE_ROOT/$(date +%Y%m%d-%H%M)

doArchive()
{
    SOURCES=$1;
    if [ -z "$SOURCES" ]; then
        return 0
    fi

    if [ ! -d "$ARCHIVE_DIR" ] ; then
        mkdir -p "$ARCHIVE_DIR"
    fi

    if [[ ! -w "${ARCHIVE_DIR}" || ! -d "${ARCHIVE_DIR}" ]] ; then
        echo "Cannot write to archive directory: $ARCHIVE_DIR"
        return 1
    fi
    echo "archiving command: mv $SOURCES $ARCHIVE_DIR"
    mv $SOURCES $ARCHIVE_DIR
    gzip $ARCHIVE_DIR/*
}

for school in $CSV_SCHOOLS; do

    JAVA_OPTS="${GLOBAL_JAVA_OPTS} -Dlocal.config.file=<%= scope.lookupvar('sis::batch::home') %>/etc/schools/${school}/local.properties "
     # Collect the list of filenames
    FILENAME_OPTS=""
    for file in $CSV_OBJECT_TYPES; do
        CSV_FILE="${CSV_DIR}/${file}.${school}.csv"
        if [[ -f ${CSV_FILE} ]]; then
            FILENAME_OPTS="${FILENAME_OPTS} -Dfilename@com.rsmart.customer.integration.processor.cle.Cle${file}Processor=${CSV_FILE}" 
            echo "processing file: ${CSV_FILE}" | tee -a ${OUTPUT}
            ARCHIVE_NAMES="$ARCHIVE_NAMES ${CSV_FILE}"
        else
            echo "No file for ${CSV_FILE}" | tee -a ${OUTPUT}
        fi
    done

    # TODO - What consitutes an error?
    ERROR=""

    # Run the importer
    java ${JAVA_OPTS} ${FILENAME_OPTS} -jar ${SIS_JAR} 2>&1 | tee -a ${OUTPUT}
	# archive the files so we don't reprocess next time
    doArchive "${ARCHIVE_NAMES}"
    ARCHIVE_NAMES=""
done

if [[ $EMAIL_RECIPIENT != "undefined" ]]; then
    mail -s "SIS batch update for ${NOW}" ${EMAIL_RECIPIENT} < ${OUTPUT}
fi
rm -f $OUTPUT
